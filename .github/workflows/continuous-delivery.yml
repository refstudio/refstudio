name: Continuous Delivery

on:
  workflow_run:
    workflows: [commit-lint, node-continuous-integration, python-continuous-integration]
    types: [completed]
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Generate release token
        id: release_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RELEASE_APP_ID }}
          private_key: ${{ secrets.RELEASE_PRIVATE_KEY }}
      - name: Get branch
        uses: rlespinasse/github-slug-action@4.0.0
      - name: Release
        uses: ridedott/release-me-action@v3.6.25
        if: ${{ env.GITHUB_REF_SLUG == 'main' }}
        env:
          GITHUB_TOKEN: ${{ steps.release_token.outputs.token }}
  bundle-sources:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
    - name: Rust setup
      uses: dtolnay/rust-toolchain@stable
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
    - uses: actions/setup-node@v2.5.1
      with:
        node-version: 'lts/*'
    - name: Install dependencies
      run: yarn install --immutable
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install project
      run: poetry install --no-interaction
    - name: Build pythone sidecar
      run: yarn python
    - name: Build the app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      with:
        prerelease: false
    - name: Upload artifacts
      uses: Shopify/upload-to-release@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: 
        path: 
        repo-token: ${{ secrets.GITHUB_TOKEN }}