# Thanks to this blog post: https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions/
name: Build

on:
  push:
    branches:
      - main
  pull_request:
    # tags:
    #   - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref,
              name: 'Release ' + context.ref,
              body: 'This is a test release to download and install Ref Studio',
              draft: true,
              prerelease: false
            })
            return data.id
    
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup JS
        uses: ./.github/actions/setup-node
      - name: Setup Python
        uses: ./.github/actions/setup-python
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Set target-triple env var
        run: echo "TARGET_TRIPLE=$(rustc -vV | grep host | cut -d ' ' -f 2)" >> $GITHUB_ENV

      # test
      - name: Echo target-triple
        run: echo $TARGET_TRIPLE
      
      - name: Create Python binary
        run: |
          poetry run pyinstaller --noconfirm --distpath src-tauri/bin/python python/main.py
          mv src-tauri/bin/python/main/main src-tauri/bin/python/main/main-$TARGET_TRIPLE

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
  
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              name: 'refstudio',
              draft: true,
              prerelease: false
            })
      

  # mac:
  #   name: Build MacOS
  #   runs-on: macos-latest
  #   steps:

  #   - name: Set target-triple env var
  #     run: echo "TARGET_TRIPLE=$(rustc -vV | grep host | cut -d ' ' -f 2)" >> $GITHUB_ENV

  #   # test
  #   - name: Echo target-triple
  #     run: echo $TARGET_TRIPLE
    
  #   - name: Build Python binary
  #     run: poetry run pyinstaller --noconfirm --distpath src-tauri/bin/python python/main.py

  #   - name: Add target-triple suffix to binary
  #     run: mv src-tauri/bin/python/main/main src-tauri/bin/python/main/main-$TARGET_TRIPLE
    

    
    
  #   - uses: tauri-apps/tauri-action@v0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       version: 0.0.1-beta.5
  #       os: macos
  #       arch: x64
  #       asset: src-tauri/bin/python/main/main-$TARGET_TRIPLE
  #       asset-name: python-binary-macos
  #       asset-content-type: application/octet-stream
  #       releaseDraft: true
  #       prerelease: false
  #       overwrite: true
    
    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: python-binary-macos
    #     path: src-tauri/bin/python/*
    #     if-no-files-found: error

    # verify it works
    # - run: ./src-tauri/bin/python/main/main serve
    # - run: curl http://localhost:1487/api/meta/status
